pipeline {
    agent any

    environment {
        TF_VERSION = "1.5.0"
        ANSIBLE_HOST_KEY_CHECKING = "False"
    }

    stages {
        stage('Install Dependencies') {
            steps {
                script {
                    sh 'apt-get update && apt-get install -y unzip sshpass'
                    sh 'curl -fsSL https://apt.releases.hashicorp.com/gpg | apt-key add -'
                    sh 'echo "deb https://apt.releases.hashicorp.com $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/hashicorp.list'
                    sh 'apt-get update && apt-get install -y terraform=${TF_VERSION}'
                    sh 'apt-get install -y ansible'
                }
            }
        }

        stage('Terraform Init & Apply') {
            steps {
                script {
                    dir('terraform') {
                        sh 'terraform init'
                        sh 'terraform apply -auto-approve'
                        sh 'terraform output -raw server_ip > ../inventory.ini'
                    }
                }
            }
        }

        stage('Ansible Deployment') {
            steps {
                script {
                    dir('ansible') {
                        sh 'ansible-playbook -i ../inventory.ini playbook.yml'
                    }
                }
            }
        }

        stage('Cleanup (Optional)') {
            when { beforeAgent true; expression { return false } } // Ex√©cution manuelle
            steps {
                script {
                    dir('terraform') {
                        sh 'terraform destroy -auto-approve'
                    }
                }
            }
        }
    }
}
